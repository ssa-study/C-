// C++11によるゲームプログラミング
#include <functional>
#include <deque>
#include <vector>
#include <memory>
#include <string>
#include <map>
#include <boost/optional.hpp>
#include <boost/variant.hpp>

#include "Holder.hpp"
#include "NamedObject.hpp"
#include "Task.hpp"
#include "TaskQueue.hpp"

using namespace std;
using namespace ts::namedobj;

bool keyWait() {
  cout << "keyWait" << endl;
  return true;
}
void initializeScreen() {
  cout << "initializeScreen" << endl;
}
int selectedMenu() {
  static int n = 0;
  cout << "selectedMenu" << endl;
  return ++n;
}

TaskQueue task_;

void update() {
  task_.update();
}
int main() {
  auto titleLogo = [](TaskArgs& ar){
	assert(ar.size() > 0);
	initializeScreen();
	Task h("hoge");
	cerr << "1" << endl;
	ar.at(0).valid("titlelogo");
	task_.waitPred(ar.at(0), [] { return keyWait(); });
	cerr << "2" << endl;
	return TaskStatus::RemoveTask;
  };
  
  auto mainMenu = [](TaskArgs& ar) {
	cerr << "mainMenu" << endl;
	switch (selectedMenu()) {
	default:
	return TaskStatus::ContinueTask;
	case 1:
	  ar.at(0).valid("at0");
	  task_.addTask(ar.at(0));
	  return TaskStatus::RemoveTask;
	case 2:
	  ar.at(1).valid("at1");
	  task_.addTask(ar.at(1));
	  return TaskStatus::RemoveTask;
	case 3:
	  cerr << "exit" << endl;
	  exit(0);
	}
  };
  
  auto ending = [](TaskArgs& ar) {
	// do ending
	cerr << "ending" << endl;
	ar.at(0).valid("ending");
	task_.waitPred(ar.at(0), [] { return keyWait(); });
	return TaskStatus::RemoveTask;
  };
  auto gameMain = [](TaskArgs& ar) {
	// do main
	cerr << "gameMain" << endl;
	ar.at(0).valid("gameMain");
	task_.waitPred(ar.at(0), [] { return true; });
	return TaskStatus::RemoveTask;
  };
  auto settingMenu = [](TaskArgs& ar) {
	cerr << "settingMenu" << endl;
	//task_.waitPred(Task::returnTask(ar), [] { return keyWait(); });
	ar.at(0).valid("settingMenu");
	task_.waitPred(ar.at(0), [] { return keyWait(); });
	return TaskStatus::RemoveTask;
  };
  //task_.run({"titleLogo", titleLogo, { mainMenu, Task(ending)}});
  /*
  task_.run({"titleLogo", titleLogo,
		{
		  { "ending", ending, {ending, ending }},
			{  "main", mainMenu, {gameMain, ending}}
		}
	});
  */

  task_.run({
	"titleLogo",
	  titleLogo, {
	  "main", mainMenu,{
		{ // game main
		  gameMain, 
			{ending, Task("main")}
		  
		}
	  , { // setting menu
		  settingMenu, {Task("titleLogo")}
		}
	  }
	}
	});

  
  cerr << " task.run finish" << endl;

  //  try {
  uint32_t frame = 0;
  while(true) {
	cerr << "Frame:" << ++frame << endl;
	update();
	//draw();
	//waitForVsync();
  }
  /*
  }
  catch (const exception& ex) {
	cerr << "exception caught: " << ex.what() << endl;
	throw;
  }
  */
}
